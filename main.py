import telebot
import sqlite3
from datetime import datetime
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot("8094395413:AAGlIanHK3Ji99-N90Nkinvqk4ikRJlkeQg")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('habits.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (user_id INTEGER PRIMARY KEY, name TEXT)''')
    c.execute('''CREATE TABLE IF NOT EXISTS habits
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  user_id INTEGER,
                  habit_name TEXT UNIQUE,
                  created_date TEXT,
                  count INTEGER DEFAULT 0)''')
    conn.commit()
    conn.close()


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def add_user(user_id, name):
    conn = sqlite3.connect('habits.db')
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO users (user_id, name) VALUES (?, ?)", (user_id, name))
    conn.commit()
    conn.close()


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
def add_habit(user_id, habit_name):
    conn = sqlite3.connect('habits.db')
    c = conn.cursor()
    created_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    try:
        c.execute("INSERT INTO habits (user_id, habit_name, created_date) VALUES (?, ?, ?)",
                  (user_id, habit_name, created_date))
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False  # –ï—Å–ª–∏ –ø—Ä–∏–≤—ã—á–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    finally:
        conn.close()


# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_habits(user_id):
    conn = sqlite3.connect('habits.db')
    c = conn.cursor()
    c.execute("SELECT id, habit_name FROM habits WHERE user_id=?", (user_id,))
    habits = c.fetchall()
    conn.close()
    return habits


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–∏–≤—ã—á–∫–∏
def update_habit_count(habit_id):
    conn = sqlite3.connect('habits.db')
    c = conn.cursor()
    c.execute("UPDATE habits SET count = count + 1 WHERE id=?", (habit_id,))
    conn.commit()
    conn.close()


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def get_stats(user_id):
    conn = sqlite3.connect('habits.db')
    c = conn.cursor()
    c.execute("SELECT habit_name, count FROM habits WHERE user_id=?", (user_id,))
    stats = c.fetchall()
    conn.close()
    return stats


# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    user = message.from_user
    add_user(user.id, user.first_name)
    bot.send_message(
        message.chat.id,
        f"–ü—Ä–∏–≤–µ—Ç {user.first_name}! –Ø –±–æ—Ç –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ –ø—Ä–∏–≤—ã—á–µ–∫.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add_habit - –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É\n"
        "/track_habit - –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ\n"
        "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    )


# –ö–æ–º–∞–Ω–¥–∞ /add_habit
@bot.message_handler(commands=['add_habit'])
def add_habit_start(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏:")
    bot.register_next_step_handler(msg, add_habit_end)


def add_habit_end(message):
    user_id = message.from_user.id
    habit_name = message.text

    if add_habit(user_id, habit_name):
        bot.send_message(message.chat.id, f"–ü—Ä–∏–≤—ã—á–∫–∞ '{habit_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    else:
        bot.send_message(message.chat.id, f"–ü—Ä–∏–≤—ã—á–∫–∞ '{habit_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")


# –ö–æ–º–∞–Ω–¥–∞ /track_habit
@bot.message_handler(commands=['track_habit'])
def track_habit(message):
    user_id = message.from_user.id
    habits = get_user_habits(user_id)

    if not habits:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫.")
        return

    # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ø—Ä–∏–≤—ã—á–µ–∫
    keyboard = InlineKeyboardMarkup()
    for habit in habits:
        keyboard.add(InlineKeyboardButton(habit[1], callback_data=f"track_{habit[0]}"))

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: call.data.startswith("track_"))
def track_habit_complete(call):
    habit_id = call.data.split("_")[1]  # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–∏–≤—ã—á–∫–∏
    update_habit_count(habit_id)

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
    conn = sqlite3.connect('habits.db')
    c = conn.cursor()
    c.execute("SELECT habit_name FROM habits WHERE id=?", (habit_id,))
    habit_name = c.fetchone()[0]
    conn.close()

    bot.answer_callback_query(call.id, f"–ü—Ä–∏–≤—ã—á–∫–∞ '{habit_name}' –æ—Ç–º–µ—á–µ–Ω–∞! ‚úÖ")
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"–ü—Ä–∏–≤—ã—á–∫–∞ '{habit_name}' –æ—Ç–º–µ—á–µ–Ω–∞! ‚úÖ"
    )


# –ö–æ–º–∞–Ω–¥–∞ /stats
@bot.message_handler(commands=['stats'])
def show_stats(message):
    user_id = message.from_user.id
    stats = get_stats(user_id)

    if not stats:
        bot.send_message(message.chat.id, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞.")
        return

    message_text = "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n" + "\n".join(
        [f"{habit[0]}: {habit[1]} —Ä–∞–∑" for habit in stats]
    )
    bot.send_message(message.chat.id, message_text)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    init_db()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)
