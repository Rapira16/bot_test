import telebot
import sqlite3
from datetime import datetime
import schedule
import time
import threading
import random
from telebot.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove
)

bot = telebot.TeleBot("8094395413:AAGlIanHK3Ji99-N90Nkinvqk4ikRJlkeQg")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

# region Database Functions
def init_db():
    conn = sqlite3.connect('habits.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (user_id INTEGER PRIMARY KEY, name TEXT, motivation_time TEXT)''')
    c.execute('''CREATE TABLE IF NOT EXISTS habits
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  user_id INTEGER,
                  habit_name TEXT,
                  created_date TEXT,
                  count INTEGER DEFAULT 0,
                  UNIQUE(user_id, habit_name))''')
    c.execute('''CREATE TABLE IF NOT EXISTS reminders
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  user_id INTEGER,
                  habit_id INTEGER,
                  reminder_time TEXT)''')
    conn.commit()
    conn.close()

def add_user(user_id, name, motivation_time=None):
    conn = sqlite3.connect('habits.db')
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO users (user_id, name, motivation_time) VALUES (?, ?, ?)", (user_id, name, motivation_time))
    conn.commit()
    conn.close()

def add_habit(user_id, habit_name):
    conn = sqlite3.connect('habits.db')
    c = conn.cursor()
    created_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    try:
        c.execute("INSERT INTO habits (user_id, habit_name, created_date) VALUES (?, ?, ?)",
                  (user_id, habit_name, created_date))
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False
    finally:
        conn.close()

def get_user_habits(user_id):
    conn = sqlite3.connect('habits.db')
    c = conn.cursor()
    c.execute("SELECT id, habit_name FROM habits WHERE user_id=?", (user_id,))
    habits = c.fetchall()
    conn.close()
    return habits

def update_habit_count(habit_id):
    conn = sqlite3.connect('habits.db')
    c = conn.cursor()
    c.execute("UPDATE habits SET count = count + 1 WHERE id=?", (habit_id,))
    conn.commit()
    conn.close()

def get_stats(user_id):
    conn = sqlite3.connect('habits.db')
    c = conn.cursor()
    c.execute("SELECT habit_name, count FROM habits WHERE user_id=?", (user_id,))
    stats = c.fetchall()
    conn.close()
    return stats

def delete_habit(habit_id):
    conn = sqlite3.connect('habits.db')
    c = conn.cursor()
    c.execute("DELETE FROM habits WHERE id=?", (habit_id,))
    conn.commit()
    conn.close()

def update_habit_name(habit_id, new_name):
    conn = sqlite3.connect('habits.db')
    c = conn.cursor()
    c.execute("UPDATE habits SET habit_name=? WHERE id=?", (new_name, habit_id))
    conn.commit()
    conn.close()

def add_reminder(user_id, habit_id, reminder_time):
    conn = sqlite3.connect('habits.db')
    c = conn.cursor()
    c.execute("INSERT INTO reminders (user_id, habit_id, reminder_time) VALUES (?, ?, ?)",
              (user_id, habit_id, reminder_time))
    conn.commit()
    conn.close()

def get_user_reminders(user_id):
    conn = sqlite3.connect('habits.db')
    c = conn.cursor()
    c.execute("SELECT habit_id, reminder_time FROM reminders WHERE user_id=?", (user_id,))
    reminders = c.fetchall()
    conn.close()
    return reminders

def send_reminder(user_id, habit_name):
    bot.send_message(user_id, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ü–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É '{habit_name}'!")

def schedule_reminder(user_id, habit_id, reminder_time):
    conn = sqlite3.connect('habits.db')
    c = conn.cursor()
    c.execute("SELECT habit_name FROM habits WHERE id=?", (habit_id,))
    habit_name = c.fetchone()[0]
    conn.close()

    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    schedule.every().day.at(reminder_time).do(send_reminder, user_id, habit_name)

def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(1)

# Motivation Messages
def send_motivation(user_id):
    motivational_quotes = [
        "–í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≤—Å–µ, —á—Ç–æ –∑–∞—Ö–æ—Ç–∏—Ç–µ!",
        "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å - —ç—Ç–æ –Ω–æ–≤—ã–π —à–∞–Ω—Å.",
        "–ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ—Å—å, –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç–µ —Å–≤–æ–µ–π —Ü–µ–ª–∏!",
        "–í–∞—à–∏ —É—Å–∏–ª–∏—è –Ω–µ –ø—Ä–æ–ø–∞–¥—É—Ç –¥–∞—Ä–æ–º.",
        "–°–¥–µ–ª–∞–π—Ç–µ —Å–µ–≥–æ–¥–Ω—è —Ç–æ, —á—Ç–æ –¥—Ä—É–≥–∏–µ –Ω–µ —Ö–æ—Ç—è—Ç, –∏ –∑–∞–≤—Ç—Ä–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Ç–æ, —á—Ç–æ –¥—Ä—É–≥–∏–µ –Ω–µ –º–æ–≥—É—Ç."
    ]
    quote = random.choice(motivational_quotes)
    bot.send_message(user_id, quote)

def schedule_motivation(user_id, motivation_time):
    schedule.every().day.at(motivation_time).do(send_motivation, user_id)

# endregion

# region Menu & Handlers
def create_menu():
    menu = ReplyKeyboardMarkup(resize_keyboard=True)
    menu.add(KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É ‚ûï"))
    menu.add(KeyboardButton("–û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ‚úÖ"))
    menu.add(KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä"))
    menu.add(KeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É ‚ùå"))
    menu.add(KeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É ‚úèÔ∏è"))
    menu.add(KeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚è∞"))
    menu.add(KeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚è∞"))  # –î–æ–±–∞–≤–ª–µ–Ω–æ
    return menu

@bot.message_handler(commands=['start'])
def start(message):
    user = message.from_user
    add_user(user.id, user.first_name)
    bot.send_message(
        message.chat.id,
        f"üëã –ü—Ä–∏–≤–µ—Ç {user.first_name}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=create_menu()
    )

@bot.message_handler(func=lambda message: True)
def handle_text(message):
    if message.text == "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É ‚ûï":
        add_habit_start(message)
    elif message.text == "–û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ‚úÖ":
        track_habit(message)
    elif message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä":
        show_stats(message)
    elif message.text == "–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É ‚ùå":
        delete_habit_start(message)
    elif message.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É ‚úèÔ∏è":
        edit_habit_start(message)
    elif message.text == "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚è∞":
        set_reminder_start(message)
    elif message.text == "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚è∞":  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        set_motivation_start(message)
    elif message.text == "–ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=create_menu())
    else:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ ‚¨áÔ∏è", reply_markup=create_menu())

# region Habit Management
@bot.message_handler(commands=['add_habit'])
def add_habit_start(message):
    msg = bot.send_message(message.chat.id, "‚ûï –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏:", reply_markup=ReplyKeyboardRemove())
    bot.register_next_step_handler(msg, add_habit_end)

def add_habit_end(message):
    user_id = message.from_user.id
    habit_name = message.text.strip()

    if len(habit_name) < 2:
        bot.send_message(message.chat.id, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 2 —Å–∏–º–≤–æ–ª–æ–≤!", reply_markup=create_menu())
        return

    if add_habit(user_id, habit_name):
        bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ '{habit_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=create_menu())
    else:
        bot.send_message(message.chat.id, f"‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ '{habit_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", reply_markup=create_menu())

@bot.message_handler(commands=['track_habit'])
def track_habit(message):
    user_id = message.from_user.id
    habits = get_user_habits(user_id)

    if not habits:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫.", reply_markup=create_menu())
        return

    keyboard = InlineKeyboardMarkup()
    for habit in habits:
        habit_id, habit_name = habit
        keyboard.add(InlineKeyboardButton(
            text=f"‚úÖ {habit_name}",
            callback_data=f"track_{habit_id}"
        ))
    keyboard.add(InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu"))

    bot.send_message(message.chat.id, "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith("track_"))
def track_habit_complete(call):
    habit_id = call.data.split("_")[1]

    conn = sqlite3.connect('habits.db')
    c = conn.cursor()
    c.execute("SELECT habit_name FROM habits WHERE id=?", (habit_id,))
    habit_name = c.fetchone()[0]
    conn.close()

    update_habit_count(habit_id)

    bot.answer_callback_query(call.id, f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ '{habit_name}' –æ—Ç–º–µ—á–µ–Ω–∞!")
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"üéâ –ü—Ä–∏–≤—ã—á–∫–∞ '{habit_name}' —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω–∞!"
    )
    bot.send_message(call.message.chat.id, "üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=create_menu())

@bot.message_handler(commands=['stats'])
def show_stats(message):
    user_id = message.from_user.id
    stats = get_stats(user_id)

    if not stats:
        bot.send_message(message.chat.id, "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.", reply_markup=create_menu())
        return

    message_text = "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n" + "\n".join(
        [f"‚Ä¢ {habit[0]}: {habit[1]} —Ä–∞–∑" for habit in stats]
    )
    bot.send_message(message.chat.id, message_text, reply_markup=create_menu())

# region Delete Habit
def delete_habit_start(message):
    user_id = message.from_user.id
    habits = get_user_habits(user_id)

    if not habits:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫.", reply_markup=create_menu())
        return

    keyboard = InlineKeyboardMarkup()
    for habit in habits:
        habit_id, habit_name = habit
        keyboard.add(InlineKeyboardButton(
            text=f"‚ùå {habit_name}",
            callback_data=f"delete_{habit_id}"
        ))
    keyboard.add(InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu"))

    bot.send_message(message.chat.id, "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_"))
def delete_habit_complete(call):
    habit_id = call.data.split("_")[1]

    conn = sqlite3.connect('habits.db')
    c = conn.cursor()
    c.execute("SELECT habit_name FROM habits WHERE id=?", (habit_id,))
    habit_name = c.fetchone()[0]
    conn.close()

    delete_habit(habit_id)

    bot.answer_callback_query(call.id, f"‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ '{habit_name}' —É–¥–∞–ª–µ–Ω–∞!")
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"üóëÔ∏è –ü—Ä–∏–≤—ã—á–∫–∞ '{habit_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!"
    )
    bot.send_message(call.message.chat.id, "üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=create_menu())

# region Edit Habit
def edit_habit_start(message):
    user_id = message.from_user.id
    habits = get_user_habits(user_id)

    if not habits:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫.", reply_markup=create_menu())
        return

    keyboard = InlineKeyboardMarkup()
    for habit in habits:
        habit_id, habit_name = habit
        keyboard.add(InlineKeyboardButton(
            text=f"‚úèÔ∏è {habit_name}",
            callback_data=f"edit_{habit_id}"
        ))
    keyboard.add(InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu"))

    bot.send_message(message.chat.id, "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_"))
def edit_habit_complete(call):
    habit_id = call.data.split("_")[1]

    conn = sqlite3.connect('habits.db')
    c = conn.cursor()
    c.execute("SELECT habit_name FROM habits WHERE id=?", (habit_id,))
    habit_name = c.fetchone()[0]
    conn.close()

    msg = bot.send_message(call.message.chat.id, f"üîÑ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏ '{habit_name}':", reply_markup=ReplyKeyboardRemove())
    bot.register_next_step_handler(msg, lambda message, h_id=habit_id: update_habit_end(message, h_id))

def update_habit_end(message, habit_id):
    new_name = message.text.strip()

    if len(new_name) < 2:
        bot.send_message(message.chat.id, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 2 —Å–∏–º–≤–æ–ª–æ–≤!", reply_markup=create_menu())
        return

    update_habit_name(habit_id, new_name)
    bot.send_message(message.chat.id, f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ '{new_name}'!", reply_markup=create_menu())

# endregion

# region Reminder Management
def set_reminder_start(message):
    user_id = message.from_user.id
    habits = get_user_habits(user_id)

    if not habits:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫.", reply_markup=create_menu())
        return

    keyboard = InlineKeyboardMarkup()
    for habit in habits:
        habit_id, habit_name = habit
        keyboard.add(InlineKeyboardButton(
            text=f"‚è∞ {habit_name}",
            callback_data=f"set_reminder_{habit_id}"
        ))
    keyboard.add(InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu"))

    bot.send_message(message.chat.id, "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith("set_reminder_"))
def set_reminder_complete(call):
    habit_id = call.data.split("_")[2]
    msg = bot.send_message(call.message.chat.id, "üïí –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM):", reply_markup=ReplyKeyboardRemove())
    bot.register_next_step_handler(msg, lambda message, h_id=habit_id: set_reminder_time(message, h_id))

def set_reminder_time(message, habit_id):
    user_id = message.from_user.id
    reminder_time = message.text.strip()

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏
        datetime.strptime(reminder_time, "%H:%M")
        add_reminder(user_id, habit_id, reminder_time)
        schedule_reminder(user_id, habit_id, reminder_time)
        bot.send_message(message.chat.id, f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {reminder_time}!", reply_markup=create_menu())
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM.", reply_markup=create_menu())

# endregion

# region Motivation Management
def set_motivation_start(message):
    user_id = message.from_user.id
    msg = bot.send_message(message.chat.id, "üïí –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM):", reply_markup=ReplyKeyboardRemove())
    bot.register_next_step_handler(msg, lambda msg: set_motivation_time(msg, user_id))

def set_motivation_time(message, user_id):
    motivation_time = message.text.strip()

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏
        datetime.strptime(motivation_time, "%H:%M")
        add_user(user_id, message.from_user.first_name, motivation_time)
        schedule_motivation(user_id, motivation_time)
        bot.send_message(message.chat.id, f"‚úÖ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ {motivation_time}!", reply_markup=create_menu())
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM.", reply_markup=create_menu())

# endregion

# region Back to Menu
@bot.callback_query_handler(func=lambda call: call.data == "back_to_menu")
def back_to_menu(call):
    bot.send_message(
        chat_id=call.message.chat.id,
        text="üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=create_menu()
    )
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

# endregion

if __name__ == "__main__":
    init_db()
    threading.Thread(target=run_scheduler).start()  # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    print("üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    bot.polling(none_stop=True)
